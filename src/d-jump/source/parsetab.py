
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARGUMENTS BINARY BINARY_VARIABLE COLON COMPONENT CPLUSPLUS DASH DEFAULT EXCLUDE FALSE_BITVARIABLE FORMAT IDENTIFIER IF_BEGIN IF_END INCLUDE INCLUDES LBRACKET LCURLY NAMESPACE NEWLINE OPCODE_FORMAT RBRACKET RCURLY RULE SETTINGS SLASH TRUE_BITVARIABLE WHITESPACElist_complete_item : complete_itemlist_complete_item : list_complete_item complete_itemcomplete_item : complete_settings\n                     | complete_rule\n                     | complete_component\n                     | complete_defaultcomplete_settings : settings_header name opcode_format includes arguments settings_footersettings_header : LBRACKET SETTINGS RBRACKET NEWLINEname : DASH NAMESPACE COLON IDENTIFIER NEWLINEopcode_format : DASH OPCODE_FORMAT COLON list_formatted_binary_item NEWLINEincludes : DASH INCLUDES COLON list_includes NEWLINElist_includes : IDENTIFIERlist_includes : list_includes IDENTIFIERarguments : DASH ARGUMENTS COLON list_arguments NEWLINElist_arguments : IDENTIFIERlist_arguments : list_arguments IDENTIFIERlist_arguments : settings_footer : LBRACKET SLASH SETTINGS RBRACKET NEWLINEcomplete_rule : rule_header list_rule_component rule_footerrule_header : LBRACKET RULE IDENTIFIER RBRACKET NEWLINElist_rule_component : rule_componentlist_rule_component : list_rule_component rule_componentrule_component : include_statement\n                      | exclude_statement\n                      | component_statementinclude_statement : DASH INCLUDE COLON list_binary_item NEWLINElist_binary_item : binary_itemlist_binary_item : list_binary_item binary_itembinary_item : BINARY\n                   | DASHexclude_statement : DASH EXCLUDE COLON list_binary_item NEWLINEcomponent_statement : DASH COMPONENT COLON IDENTIFIER NEWLINErule_footer : LBRACKET SLASH RULE RBRACKET NEWLINEcomplete_component : component_header format_statement code_statement component_footercomponent_header : LBRACKET COMPONENT IDENTIFIER RBRACKET NEWLINEformat_statement : DASH FORMAT COLON list_formatted_binary_item NEWLINEcode_statement : LCURLY NEWLINE list_cplusplus RCURLY NEWLINElist_cplusplus : WHITESPACE CPLUSPLUS NEWLINElist_cplusplus : WHITESPACE IF_BEGIN list_bitvariable IF_END CPLUSPLUS NEWLINElist_cplusplus : list_cplusplus WHITESPACE CPLUSPLUS NEWLINElist_cplusplus : list_cplusplus WHITESPACE IF_BEGIN list_bitvariable IF_END CPLUSPLUS NEWLINElist_bitvariable : bitvariablelist_bitvariable : list_bitvariable bitvariablebitvariable : TRUE_BITVARIABLEbitvariable : FALSE_BITVARIABLElist_formatted_binary_item : formatted_binary_itemlist_formatted_binary_item : list_formatted_binary_item formatted_binary_itemformatted_binary_item : binary_item\n                             | BINARY_VARIABLEcomponent_footer : LBRACKET SLASH COMPONENT RBRACKET NEWLINEcomplete_default : default_header code_statement default_footerdefault_header : LBRACKET DEFAULT RBRACKET NEWLINEdefault_footer : LBRACKET SLASH DEFAULT RBRACKET NEWLINE'
    
_lr_action_items = {'LBRACKET':([0,1,2,3,4,5,6,12,15,16,17,18,19,23,32,33,38,40,55,65,89,96,98,99,104,117,119,129,133,137,],[11,11,-1,-3,-4,-5,-6,-2,34,-21,-23,-24,-25,41,-19,-22,56,-51,-34,90,-7,-26,-31,-32,-37,-33,-53,-50,-14,-18,]),'$end':([1,2,3,4,5,6,12,32,40,55,89,117,119,129,137,],[0,-1,-3,-4,-5,-6,-2,-19,-51,-34,-7,-33,-53,-50,-18,]),'DASH':([7,8,9,13,15,16,17,18,19,29,33,47,52,53,57,61,68,71,72,73,74,75,78,79,80,81,87,88,93,94,96,97,98,99,102,116,127,],[14,20,22,30,20,-21,-23,-24,-25,48,-22,66,71,71,71,-8,71,-30,71,-27,-29,71,71,-46,-48,-49,-20,-35,71,-9,-26,-28,-31,-32,-47,-10,-11,]),'LCURLY':([10,21,64,101,],[24,24,-52,-36,]),'SETTINGS':([11,112,],[25,124,]),'RULE':([11,51,],[26,70,]),'COMPONENT':([11,20,77,],[27,37,100,]),'DEFAULT':([11,58,],[28,82,]),'NAMESPACE':([14,],[31,]),'INCLUDE':([20,],[35,]),'EXCLUDE':([20,],[36,]),'FORMAT':([22,],[39,]),'NEWLINE':([24,43,46,62,63,69,71,72,73,74,75,76,78,79,80,81,83,85,93,95,97,102,103,105,113,114,115,118,125,126,128,131,132,134,135,],[42,61,64,87,88,94,-30,96,-27,-29,98,99,101,-46,-48,-49,104,107,116,117,-28,-47,119,120,-17,127,-12,129,133,-15,-13,136,137,-16,138,]),'RBRACKET':([25,28,44,45,70,82,100,124,],[43,46,62,63,95,103,118,132,]),'IDENTIFIER':([26,27,50,54,92,113,114,115,125,126,128,134,],[44,45,69,76,115,126,128,-12,134,-15,-13,-16,]),'OPCODE_FORMAT':([30,],[49,]),'COLON':([31,35,36,37,39,49,67,91,],[50,52,53,54,57,68,92,113,]),'SLASH':([34,41,56,90,],[51,58,77,112,]),'WHITESPACE':([42,59,107,120,136,138,],[60,84,-38,-40,-39,-41,]),'INCLUDES':([48,],[67,]),'BINARY':([52,53,57,68,71,72,73,74,75,78,79,80,81,93,97,102,],[74,74,74,74,-30,74,-27,-29,74,74,-46,-48,-49,74,-28,-47,]),'BINARY_VARIABLE':([57,68,71,74,78,79,80,81,93,102,],[81,81,-30,-29,81,-46,-48,-49,81,-47,]),'RCURLY':([59,107,120,136,138,],[83,-38,-40,-39,-41,]),'CPLUSPLUS':([60,84,122,130,],[85,105,131,135,]),'IF_BEGIN':([60,84,],[86,106,]),'ARGUMENTS':([66,],[91,]),'TRUE_BITVARIABLE':([86,106,108,109,110,111,121,123,],[110,110,110,-42,-44,-45,110,-43,]),'FALSE_BITVARIABLE':([86,106,108,109,110,111,121,123,],[111,111,111,-42,-44,-45,111,-43,]),'IF_END':([108,109,110,111,121,123,],[122,-42,-44,-45,130,-43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'list_complete_item':([0,],[1,]),'complete_item':([0,1,],[2,12,]),'complete_settings':([0,1,],[3,3,]),'complete_rule':([0,1,],[4,4,]),'complete_component':([0,1,],[5,5,]),'complete_default':([0,1,],[6,6,]),'settings_header':([0,1,],[7,7,]),'rule_header':([0,1,],[8,8,]),'component_header':([0,1,],[9,9,]),'default_header':([0,1,],[10,10,]),'name':([7,],[13,]),'list_rule_component':([8,],[15,]),'rule_component':([8,15,],[16,33,]),'include_statement':([8,15,],[17,17,]),'exclude_statement':([8,15,],[18,18,]),'component_statement':([8,15,],[19,19,]),'format_statement':([9,],[21,]),'code_statement':([10,21,],[23,38,]),'opcode_format':([13,],[29,]),'rule_footer':([15,],[32,]),'default_footer':([23,],[40,]),'includes':([29,],[47,]),'component_footer':([38,],[55,]),'list_cplusplus':([42,],[59,]),'arguments':([47,],[65,]),'list_binary_item':([52,53,],[72,75,]),'binary_item':([52,53,57,68,72,75,78,93,],[73,73,80,80,97,97,80,80,]),'list_formatted_binary_item':([57,68,],[78,93,]),'formatted_binary_item':([57,68,78,93,],[79,79,102,102,]),'settings_footer':([65,],[89,]),'list_bitvariable':([86,106,],[108,121,]),'bitvariable':([86,106,108,121,],[109,109,123,123,]),'list_includes':([92,],[114,]),'list_arguments':([113,],[125,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> list_complete_item","S'",1,None,None,None),
  ('list_complete_item -> complete_item','list_complete_item',1,'p_list_complete_item_single','dpp_jump_compiler.py',304),
  ('list_complete_item -> list_complete_item complete_item','list_complete_item',2,'p_list_complete_item_group','dpp_jump_compiler.py',308),
  ('complete_item -> complete_settings','complete_item',1,'p_complete_item','dpp_jump_compiler.py',312),
  ('complete_item -> complete_rule','complete_item',1,'p_complete_item','dpp_jump_compiler.py',313),
  ('complete_item -> complete_component','complete_item',1,'p_complete_item','dpp_jump_compiler.py',314),
  ('complete_item -> complete_default','complete_item',1,'p_complete_item','dpp_jump_compiler.py',315),
  ('complete_settings -> settings_header name opcode_format includes arguments settings_footer','complete_settings',6,'p_complete_settings','dpp_jump_compiler.py',319),
  ('settings_header -> LBRACKET SETTINGS RBRACKET NEWLINE','settings_header',4,'p_settings_header','dpp_jump_compiler.py',323),
  ('name -> DASH NAMESPACE COLON IDENTIFIER NEWLINE','name',5,'p_name','dpp_jump_compiler.py',326),
  ('opcode_format -> DASH OPCODE_FORMAT COLON list_formatted_binary_item NEWLINE','opcode_format',5,'p_opcode_format','dpp_jump_compiler.py',330),
  ('includes -> DASH INCLUDES COLON list_includes NEWLINE','includes',5,'p_includes','dpp_jump_compiler.py',334),
  ('list_includes -> IDENTIFIER','list_includes',1,'p_list_includes_single','dpp_jump_compiler.py',338),
  ('list_includes -> list_includes IDENTIFIER','list_includes',2,'p_list_includes_group','dpp_jump_compiler.py',342),
  ('arguments -> DASH ARGUMENTS COLON list_arguments NEWLINE','arguments',5,'p_arguments','dpp_jump_compiler.py',346),
  ('list_arguments -> IDENTIFIER','list_arguments',1,'p_list_arguments_single','dpp_jump_compiler.py',350),
  ('list_arguments -> list_arguments IDENTIFIER','list_arguments',2,'p_list_arguments_group','dpp_jump_compiler.py',354),
  ('list_arguments -> <empty>','list_arguments',0,'p_list_arguments_none','dpp_jump_compiler.py',358),
  ('settings_footer -> LBRACKET SLASH SETTINGS RBRACKET NEWLINE','settings_footer',5,'p_settings_footer','dpp_jump_compiler.py',362),
  ('complete_rule -> rule_header list_rule_component rule_footer','complete_rule',3,'p_complete_rule','dpp_jump_compiler.py',365),
  ('rule_header -> LBRACKET RULE IDENTIFIER RBRACKET NEWLINE','rule_header',5,'p_rule_header','dpp_jump_compiler.py',369),
  ('list_rule_component -> rule_component','list_rule_component',1,'p_list_rule_component_single','dpp_jump_compiler.py',373),
  ('list_rule_component -> list_rule_component rule_component','list_rule_component',2,'p_list_rule_component_group','dpp_jump_compiler.py',377),
  ('rule_component -> include_statement','rule_component',1,'p_rule_component','dpp_jump_compiler.py',381),
  ('rule_component -> exclude_statement','rule_component',1,'p_rule_component','dpp_jump_compiler.py',382),
  ('rule_component -> component_statement','rule_component',1,'p_rule_component','dpp_jump_compiler.py',383),
  ('include_statement -> DASH INCLUDE COLON list_binary_item NEWLINE','include_statement',5,'p_include_statement','dpp_jump_compiler.py',387),
  ('list_binary_item -> binary_item','list_binary_item',1,'p_list_binary_item_single','dpp_jump_compiler.py',391),
  ('list_binary_item -> list_binary_item binary_item','list_binary_item',2,'p_list_binary_item_group','dpp_jump_compiler.py',395),
  ('binary_item -> BINARY','binary_item',1,'p_binary_item','dpp_jump_compiler.py',399),
  ('binary_item -> DASH','binary_item',1,'p_binary_item','dpp_jump_compiler.py',400),
  ('exclude_statement -> DASH EXCLUDE COLON list_binary_item NEWLINE','exclude_statement',5,'p_exclude_statement','dpp_jump_compiler.py',404),
  ('component_statement -> DASH COMPONENT COLON IDENTIFIER NEWLINE','component_statement',5,'p_component_statement','dpp_jump_compiler.py',408),
  ('rule_footer -> LBRACKET SLASH RULE RBRACKET NEWLINE','rule_footer',5,'p_rule_footer','dpp_jump_compiler.py',412),
  ('complete_component -> component_header format_statement code_statement component_footer','complete_component',4,'p_complete_component','dpp_jump_compiler.py',415),
  ('component_header -> LBRACKET COMPONENT IDENTIFIER RBRACKET NEWLINE','component_header',5,'p_component_header','dpp_jump_compiler.py',419),
  ('format_statement -> DASH FORMAT COLON list_formatted_binary_item NEWLINE','format_statement',5,'p_format_statement','dpp_jump_compiler.py',423),
  ('code_statement -> LCURLY NEWLINE list_cplusplus RCURLY NEWLINE','code_statement',5,'p_code_statement','dpp_jump_compiler.py',427),
  ('list_cplusplus -> WHITESPACE CPLUSPLUS NEWLINE','list_cplusplus',3,'p_list_cplusplus_single_A','dpp_jump_compiler.py',431),
  ('list_cplusplus -> WHITESPACE IF_BEGIN list_bitvariable IF_END CPLUSPLUS NEWLINE','list_cplusplus',6,'p_list_cplusplus_single_B','dpp_jump_compiler.py',435),
  ('list_cplusplus -> list_cplusplus WHITESPACE CPLUSPLUS NEWLINE','list_cplusplus',4,'p_list_cplusplus_group_A','dpp_jump_compiler.py',439),
  ('list_cplusplus -> list_cplusplus WHITESPACE IF_BEGIN list_bitvariable IF_END CPLUSPLUS NEWLINE','list_cplusplus',7,'p_list_cplusplus_group_B','dpp_jump_compiler.py',444),
  ('list_bitvariable -> bitvariable','list_bitvariable',1,'p_list_bitvariable_single','dpp_jump_compiler.py',449),
  ('list_bitvariable -> list_bitvariable bitvariable','list_bitvariable',2,'p_list_bitvariable_group','dpp_jump_compiler.py',453),
  ('bitvariable -> TRUE_BITVARIABLE','bitvariable',1,'p_bitvariable_A','dpp_jump_compiler.py',457),
  ('bitvariable -> FALSE_BITVARIABLE','bitvariable',1,'p_bitvariable_B','dpp_jump_compiler.py',461),
  ('list_formatted_binary_item -> formatted_binary_item','list_formatted_binary_item',1,'p_list_formatted_binary_item_single','dpp_jump_compiler.py',467),
  ('list_formatted_binary_item -> list_formatted_binary_item formatted_binary_item','list_formatted_binary_item',2,'p_list_formatted_binary_item_group','dpp_jump_compiler.py',471),
  ('formatted_binary_item -> binary_item','formatted_binary_item',1,'p_formatted_binary_item','dpp_jump_compiler.py',475),
  ('formatted_binary_item -> BINARY_VARIABLE','formatted_binary_item',1,'p_formatted_binary_item','dpp_jump_compiler.py',476),
  ('component_footer -> LBRACKET SLASH COMPONENT RBRACKET NEWLINE','component_footer',5,'p_component_footer','dpp_jump_compiler.py',480),
  ('complete_default -> default_header code_statement default_footer','complete_default',3,'p_complete_default','dpp_jump_compiler.py',488),
  ('default_header -> LBRACKET DEFAULT RBRACKET NEWLINE','default_header',4,'p_default_header','dpp_jump_compiler.py',492),
  ('default_footer -> LBRACKET SLASH DEFAULT RBRACKET NEWLINE','default_footer',5,'p_default_footer','dpp_jump_compiler.py',495),
]
